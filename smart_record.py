import os
import glob
import pandas as pd
import argparse
import xml.etree.ElementTree as ET
from random import shuffle
from math import floor


def check(member):



    if float(member[4][2].text)-float(member[4][0].text)<8:
        return False
    if float(member[4][3].text) - float(member[4][1].text) < 8:
        return False

    return True


def xml_to_csv(file_list):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines them in a single Pandas datagrame.

    Parameters:
    ----------
    path : {str}
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """

    f=open("not_phone.txt","r")
    phone=f.read().split("\n")


    classes_names = []
    xml_list = []
    for idx, xml_file in enumerate(file_list):


        tree = ET.parse(xml_file)
        root = tree.getroot()
        for member in root.findall("object"):
            classes_names.append(member[0].text)


            value = (
                root.find("filename").text.replace(".HEIC", ".jpg").replace(".jpeg", ".jpg").replace(".png", ".jpg"),
                floor(float(root.find("size")[0].text)),
                floor(float(root.find("size")[1].text)),
                member[0].text,
                floor(float(member[4][0].text)),
                floor(float(member[4][1].text)),
                floor(float(member[4][2].text)),
                floor(float(member[4][3].text)),
            )

            if check(member):
                #if value[5]/value[2]>0.4:
                    xml_list.append(value)


    column_name = [
        "filename",
        "width",
        "height",
        "class",
        "xmin",
        "ymin",
        "xmax",
        "ymax",
    ]
    xml_df = pd.DataFrame(xml_list, columns=column_name)
    classes_names = list(set(classes_names))
    classes_names.sort()
    return xml_df, classes_names

def get_training_and_testing_sets(file_list, split):
    split_index = floor(len(file_list) * split)
    testing = file_list[:split_index]
    training = file_list[split_index:]
    return training, testing

def save_cvs(values,directoory):
    xml_df, classes_names = xml_to_csv(values)
    xml_df.to_csv(directoory, index=None)





