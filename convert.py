import glob
import json
import os
import glob
import pandas as pd
import argparse
import xml.etree.ElementTree as ET


def xml_to_csv(path):
    """Iterates through all .xml files (generated by labelImg) in a given directory and combines them in a single Pandas datagrame.

    Parameters:
    ----------
    path : {str}
        The path containing the .xml files
    Returns
    -------
    Pandas DataFrame
        The produced dataframe
    """
    classes_names = []
    xml_list = []
    for xml_file in glob.glob(path + "/*.xml"):
        tree = ET.parse(xml_file)
        root = tree.getroot()
        for member in root.findall("object"):
            classes_names.append(member[0].text)
            file_name = root.find("filename").text.replace(".HEIC", ".jpg").replace(".jpeg", ".jpg").replace(".png",
                                                                                                                     ".jpg")
            print(file_name)
            img_w = int(root.find("size")[0].text)
            img_h = int(root.find("size")[1].text)
            name_class = member[0].text
            xmin = int(member[4][0].text)
            ymin = int(member[4][1].text)
            xmax = int(member[4][2].text)
            ymax = int(member[4][3].text)
            w = int(xmax-xmin)
            h = ymax-ymin

            if name_class == "Squash":
                generate_json(xmin, ymin, h, w, name_class, file_name)




def generate_json(x, y, h, w, name_class, file_name):
    image_dict = {"image": '', "annotations": []}
    label_dict = {"label": '', "coordinates": {}}
    coord_dict = {"x": int, "y": int, "width": int, "height": int}

    coord_dict['x'] = x
    coord_dict['y'] = y
    coord_dict['width'] = w
    coord_dict['height'] = h

    label_dict['label'] = name_class
    label_dict['coordinates'] = coord_dict

    image_dict['image'] = file_name
    image_dict['annotations'].append(label_dict)

    annotations.append(image_dict)


annotations = []

xml_to_csv("voc_outputs")

json_file = json.dumps(annotations)
with open('Annotations.json', 'w') as f:
    f.write(json_file)